Shader "NatureManufacture/HDRP/Layered/Top Cover CutOut"
{
    Properties
    {
        _AlphaCutoff("Alpha Cutoff", Range(0, 1)) = 0.5
        _BaseColor("Base Color", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_BaseColorMap("Base Map(RGB) Alpha(A)", 2D) = "white" {}
        [ToggleUI]_BaseUsePlanarUV("Base Use Planar UV", Float) = 0
        _BaseTilingOffset("Base Tiling and Offset", Vector) = (1, 1, 0, 0)
        [Normal][NoScaleOffset]_BaseNormalMap("Base Normal Map", 2D) = "bump" {}
        _BaseNormalScale("Base Normal Scale", Range(0, 8)) = 1
        [NoScaleOffset]_BaseMaskMap("Base Mask Map MT(R) AO(G) H(B) SM(A)", 2D) = "white" {}
        _BaseMetallic("Base Metallic", Range(0, 1)) = 1
        _BaseAORemapMin("Base AO Remap Min", Range(0, 1)) = 0
        _BaseAORemapMax("Base AO Remap Max", Range(0, 1)) = 1
        _BaseSmoothnessRemapMin("Base Smoothness Remap Min", Range(0, 1)) = 0
        _BaseSmoothnessRemapMax("Base Smoothness Remap Max", Range(0, 1)) = 1
        [NoScaleOffset]_LayerMask("Layer Mask (R)", 2D) = "black" {}
        [ToggleUI]_Invert_Layer_Mask("Invert Layer Mask", Float) = 0
        _Height_Transition("Height Blend Transition", Range(0.001, 1)) = 1
        _HeightMin("Height Min", Float) = 0
        _HeightMax("Height Max", Float) = 1
        _HeightOffset("Height Offset", Float) = 0
        _HeightMin2("Height 2 Min", Float) = 0
        _HeightMax2("Height 2 Max", Float) = 1
        _HeightOffset2("Height 2 Offset", Float) = 0
        _Base2Color("Base 2 Color", Color) = (1, 1, 1, 0)
        [NoScaleOffset]_Base2ColorMap("Base 2 Map", 2D) = "white" {}
        _Base2TilingOffset("Base 2 Tiling and Offset", Vector) = (1, 1, 0, 0)
        [ToggleUI]_Base2UsePlanarUV("Base 2 Use Planar UV", Float) = 0
        [Normal][NoScaleOffset]_Base2NormalMap("Base 2 Normal Map", 2D) = "bump" {}
        _Base2NormalScale("Base 2 Normal Scale", Range(0, 8)) = 1
        [NoScaleOffset]_Base2MaskMap("Base 2 Mask Map MT(R) AO(G) H(B) SM(A)", 2D) = "white" {}
        _Base2Metallic("Base 2 Metallic", Range(0, 1)) = 1
        _Base2SmoothnessRemapMin("Base 2 Smoothness Remap Min", Range(0, 1)) = 0
        _Base2SmoothnessRemapMax("Base 2 Smoothness Remap Max", Range(0, 1)) = 1
        _Base2AORemapMin("Base 2 AO Remap Min", Range(0, 1)) = 0
        _Base2AORemapMax("Base 2 AO Remap Max", Range(0, 1)) = 1
        [ToggleUI]_USEDYNAMICCOVERTSTATICMASKF("Use Dynamic Cover (T) Static Mask (F)", Float) = 1
        [NoScaleOffset]_CoverBaseColorMap("Cover Base Map (RGB) Mask (A)", 2D) = "white" {}
        _CoverMaskPower("Cover Mask Power", Range(0, 10)) = 1
        _Cover_Amount("Cover Amount", Range(0, 2)) = 0
        _Cover_Amount_Grow_Speed("Cover Amount Grow Speed", Range(0, 3)) = 3
        _Cover_Max_Angle("Cover Max Angle", Range(0.001, 90)) = 35
        _Cover_Min_Height("Cover Min Height", Float) = -10000
        _Cover_Min_Height_Blending("Cover Min Height Blending", Range(0, 500)) = 1
        _CoverBaseColor("Cover Base Color", Color) = (1, 1, 1, 0)
        _CoverTilingOffset("Cover Tiling Offset", Vector) = (1, 1, 0, 0)
        [ToggleUI]_CoverUsePlanarUV("Cover Use Planar UV", Float) = 0
        [Normal][NoScaleOffset]_CoverNormalMap("Cover Normal Map", 2D) = "bump" {}
        _CoverNormalScale("Cover Normal Scale", Range(0, 8)) = 1
        _CoverNormalBlendHardness("Cover Normal Blend Hardness", Range(0, 8)) = 1
        _CoverHardness("Cover Hardness", Range(0, 10)) = 5
        _CoverHeightMapMin("Cover Height Map Min", Float) = 0
        _CoverHeightMapMax("Cover Height Map Max", Float) = 1
        _CoverHeightMapOffset("Cover Height Map Offset", Float) = 0
        [NoScaleOffset]_CoverMaskMap("Cover Mask Map MT(R) AO(G) H(B) SM(A)", 2D) = "white" {}
        _CoverMetallic("Cover Metallic", Range(0, 1)) = 1
        _CoverAORemapMin("Cover AO Remap Min", Range(0, 1)) = 0
        _CoverAORemapMax("Cover AO Remap Max", Range(0, 1)) = 1
        _CoverSmoothnessRemapMin("Cover Smoothness Remap Min", Range(0, 1)) = 0
        _CoverSmoothnessRemapMax("Cover Smoothness Remap Max", Range(0, 1)) = 1
        _WetColor("Wet Color Vertex(R)", Color) = (0.7735849, 0.7735849, 0.7735849, 0)
        _WetSmoothness("Wet Smoothness Vertex(R)", Range(0, 1)) = 1
        [HideInInspector]_EmissionColor("Color", Color) = (1, 1, 1, 1)
        [HideInInspector]_RenderQueueType("Float", Float) = 1
        [HideInInspector][ToggleUI]_AddPrecomputedVelocity("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentWritingMotionVec("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_AlphaCutoffEnable("Boolean", Float) = 1
        [HideInInspector]_TransparentSortPriority("_TransparentSortPriority", Float) = 0
        [HideInInspector][ToggleUI]_UseShadowThreshold("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DoubleSidedEnable("Boolean", Float) = 0
        [HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)]_DoubleSidedNormalMode("Float", Float) = 2
        [HideInInspector]_DoubleSidedConstants("Vector4", Vector) = (1, 1, -1, 0)
        [HideInInspector][Enum(Auto, 0, On, 1, Off, 2)]_DoubleSidedGIMode("Float", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPrepassEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPostpassEnable("Boolean", Float) = 0
        [HideInInspector]_SurfaceType("Float", Float) = 0
        [HideInInspector]_BlendMode("Float", Float) = 0
        [HideInInspector]_SrcBlend("Float", Float) = 1
        [HideInInspector]_DstBlend("Float", Float) = 0
        [HideInInspector]_AlphaSrcBlend("Float", Float) = 1
        [HideInInspector]_AlphaDstBlend("Float", Float) = 0
        [HideInInspector][ToggleUI]_AlphaToMask("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_AlphaToMaskInspectorValue("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ZWrite("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_TransparentZWrite("Boolean", Float) = 0
        [HideInInspector]_CullMode("Float", Float) = 2
        [HideInInspector][ToggleUI]_EnableFogOnTransparent("Boolean", Float) = 1
        [HideInInspector]_CullModeForward("Float", Float) = 2
        [HideInInspector][Enum(Front, 1, Back, 2)]_TransparentCullMode("Float", Float) = 2
        [HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.OpaqueCullMode)]_OpaqueCullMode("Float", Float) = 2
        [HideInInspector]_ZTestDepthEqualForOpaque("Float", Int) = 4
        [HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)]_ZTestTransparent("Float", Float) = 4
        [HideInInspector][ToggleUI]_TransparentBackfaceEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_RequireSplitLighting("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ReceivesSSR("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ReceivesSSRTransparent("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_EnableBlendModePreserveSpecularLighting("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_SupportDecals("Boolean", Float) = 1
        [HideInInspector]_StencilRef("Float", Int) = 0
        [HideInInspector]_StencilWriteMask("Float", Int) = 6
        [HideInInspector]_StencilRefDepth("Float", Int) = 8
        [HideInInspector]_StencilWriteMaskDepth("Float", Int) = 8
        [HideInInspector]_StencilRefMV("Float", Int) = 40
        [HideInInspector]_StencilWriteMaskMV("Float", Int) = 40
        [HideInInspector]_StencilRefDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskGBuffer("Float", Int) = 14
        [HideInInspector]_StencilRefGBuffer("Float", Int) = 10
        [HideInInspector]_ZTestGBuffer("Float", Int) = 4
        [HideInInspector][ToggleUI]_RayTracing("Boolean", Float) = 0
        [HideInInspector][Enum(None, 0, Box, 1, Sphere, 2, Thin, 3)]_RefractionModel("Float", Float) = 0
        [HideInInspector][NoScaleOffset]unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="AlphaTest+25"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "ShadowCaster"
            Tags
            {
                "LightMode" = "ShadowCaster"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        ColorMask 0
        ZClip [_ZClip]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TEXCOORD0
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_SHADOWS
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float4 texCoord0;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float4 interp1 : INTERP1;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyzw =  input.texCoord0;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.texCoord0 = input.interp1.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9;
            float3 _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
            float AlphaClipThreshold;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.texCoord0 =                  input.texCoord0;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "META"
            Tags
            {
                "LightMode" = "META"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature _ EDITOR_VISUALIZATION
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_TEXCOORD3
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_POSITIONPREDISPLACEMENT_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_TEXCOORD3
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 uv3 : TEXCOORD3;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 positionPredisplacementRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 texCoord3;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float3 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
             float4 interp7 : INTERP7;
             float4 interp8 : INTERP8;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.positionPredisplacementRWS;
            output.interp2.xyz =  input.normalWS;
            output.interp3.xyzw =  input.tangentWS;
            output.interp4.xyzw =  input.texCoord0;
            output.interp5.xyzw =  input.texCoord1;
            output.interp6.xyzw =  input.texCoord2;
            output.interp7.xyzw =  input.texCoord3;
            output.interp8.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.positionPredisplacementRWS = input.interp1.xyz;
            output.normalWS = input.interp2.xyz;
            output.tangentWS = input.interp3.xyzw;
            output.texCoord0 = input.interp4.xyzw;
            output.texCoord1 = input.interp5.xyzw;
            output.texCoord2 = input.interp6.xyzw;
            output.texCoord3 = input.interp7.xyzw;
            output.color = input.interp8.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshCustomInterpolation' */
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.positionPredisplacementRWS = input.positionPredisplacementRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.texCoord3 =                  input.texCoord3;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVaryingsToFragInputs' */
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassLightTransport.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ScenePickingPass"
            Tags
            {
                "LightMode" = "Picking"
            }
        
            // Render State
            Cull [_CullMode]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma editor_sync_compilation
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define SCENEPICKINGPASS 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9;
            float3 _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "SceneSelectionPass"
            Tags
            {
                "LightMode" = "SceneSelectionPass"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma editor_sync_compilation
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SCENESELECTIONPASS 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9;
            float3 _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "MotionVectors"
            Tags
            {
                "LightMode" = "MotionVectors"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskMV]
        Ref [_StencilRefMV]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        AlphaToMask [_AlphaToMask]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature_local _ _ALPHATOMASK_ON
        #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_MOTION_VECTORS
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9;
            float3 _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassMotionVectors.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "TransparentDepthPrepass"
            Tags
            {
                "LightMode" = "TransparentDepthPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_TRANSPARENT_DEPTH_PREPASS
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9;
            float3 _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
            float AlphaClipThreshold;
            float3 NormalTS;
            float Smoothness;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "FullScreenDebug"
            Tags
            {
                "LightMode" = "FullScreenDebug"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest LEqual
        ZWrite Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options renderinglayer
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9;
            float3 _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassFullScreenDebug.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "DepthOnly"
            Tags
            {
                "LightMode" = "DepthOnly"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        AlphaToMask [_AlphaToMask]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature_local _ _ALPHATOMASK_ON
        #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9;
            float3 _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBuffer"
            Tags
            {
                "LightMode" = "GBuffer"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest [_ZTestGBuffer]
        Stencil
        {
        WriteMask [_StencilWriteMaskGBuffer]
        Ref [_StencilRefGBuffer]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma multi_compile_fragment _ LIGHT_LAYERS
        #pragma multi_compile_raytracing _ LIGHT_LAYERS
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_GBUFFER
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9;
            float3 _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "Forward"
            Tags
            {
                "LightMode" = "Forward"
            }
        
            // Render State
            Cull [_CullModeForward]
        Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
        ZTest [_ZTestDepthEqualForOpaque]
        ZWrite [_ZWrite]
        ColorMask [_ColorMaskTransparentVelOne] 1
        ColorMask [_ColorMaskTransparentVelTwo] 2
        Stencil
        {
        WriteMask [_StencilWriteMask]
        Ref [_StencilRef]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma instancing_options nolightprobe
        #pragma instancing_options nolodfade
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma multi_compile _ LOD_FADE_CROSSFADE
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma multi_compile_fragment SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH SHADOW_VERY_HIGH
        #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
        #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_FORWARD
        #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING 1
        #define HAS_LIGHTLOOP 1
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SHADER_LIT 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 uv1 : TEXCOORD1;
             float4 uv2 : TEXCOORD2;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 texCoord1;
             float4 texCoord2;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
             float4 interp5 : INTERP5;
             float4 interp6 : INTERP6;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.texCoord1;
            output.interp5.xyzw =  input.texCoord2;
            output.interp6.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.texCoord1 = input.interp4.xyzw;
            output.texCoord2 = input.interp5.xyzw;
            output.color = input.interp6.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9;
            float3 _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.texCoord1 =                  input.texCoord1;
            output.texCoord2 =                  input.texCoord2;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "RayTracingPrepass"
            Tags
            {
                "LightMode" = "RayTracingPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        #pragma multi_compile_instancing
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
            #define HAVE_MESH_MODIFICATION
        
        
        
            #define SHADERPASS SHADERPASS_CONSTANT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	#include "./NM_Object_VSPro_Indirect.cginc"
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
             float3 positionOS : POSITION;
             float3 normalOS : NORMAL;
             float4 tangentOS : TANGENT;
             float4 uv0 : TEXCOORD0;
             float4 color : COLOR;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
        };
        struct VaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 positionRWS;
             float3 normalWS;
             float4 tangentWS;
             float4 texCoord0;
             float4 color;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        struct VertexDescriptionInputs
        {
             float3 ObjectSpaceNormal;
             float3 ObjectSpaceTangent;
             float3 ObjectSpacePosition;
        };
        struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        struct PackedVaryingsMeshToPS
        {
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
             float3 interp0 : INTERP0;
             float3 interp1 : INTERP1;
             float4 interp2 : INTERP2;
             float4 interp3 : INTERP3;
             float4 interp4 : INTERP4;
            #if UNITY_ANY_INSTANCING_ENABLED
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
        };
        
            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.interp0.xyz =  input.positionRWS;
            output.interp1.xyz =  input.normalWS;
            output.interp2.xyzw =  input.tangentWS;
            output.interp3.xyzw =  input.texCoord0;
            output.interp4.xyzw =  input.color;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.positionRWS = input.interp0.xyz;
            output.normalWS = input.interp1.xyz;
            output.tangentWS = input.interp2.xyzw;
            output.texCoord0 = input.interp3.xyzw;
            output.color = input.interp4.xyzw;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void AddPragma_float(float3 A, out float3 Out){
        #pragma instancing_options procedural:setupVSPro
        Out = A;
        }
        
        struct Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float
        {
        };
        
        void SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(float3 Vector3_314C8600, Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float IN, out float3 ObjectSpacePosition_1)
        {
        float3 _Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0 = Vector3_314C8600;
        float3 _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1;
        InjectSetup_float(_Property_5ec158abd968858c9d31ab40df5e9e6f_Out_0, _InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1);
        float3 _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        AddPragma_float(_InjectSetupCustomFunction_dec9b26544b4a788b8ecb4117dc3d24a_Out_1, _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1);
        ObjectSpacePosition_1 = _AddPragmaCustomFunction_b2a053178906d0848480a1f463521a1b_Out_1;
        }
        
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            Bindings_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9;
            float3 _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            SG_NMObjectVSProIndirect_0cfe1e4f145944241ab304331e53c93b_float(IN.ObjectSpacePosition, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9, _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1);
            description.Position = _NMObjectVSProIndirect_6c0045482a2d4785b7d474a9a808e6f9_ObjectSpacePosition_1;
            description.Normal = IN.ObjectSpaceNormal;
            description.Tangent = IN.ObjectSpaceTangent;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
            output.ObjectSpaceNormal =                          input.normalOS;
            output.ObjectSpaceTangent =                         input.tangentOS.xyz;
            output.ObjectSpacePosition =                        input.positionOS;
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vector for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
            input.positionOS = vertexDescription.Position;
            input.normalOS = vertexDescription.Normal;
            input.tangentOS.xyz = vertexDescription.Tangent;
        
            
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
            output.positionRWS =                input.positionRWS;
            output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
            output.texCoord0 =                  input.texCoord0;
            output.color =                      input.color;
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassConstant.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="AlphaTest+25"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "IndirectDXR"
            Tags
            {
                "LightMode" = "IndirectDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma multi_compile _ MULTI_BOUNCE_INDIRECT
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_INDIRECT
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingIndirect.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "VisibilityDXR"
            Tags
            {
                "LightMode" = "VisibilityDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma multi_compile _ TRANSPARENT_COLOR_SHADOW
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_VISIBILITY
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingVisibility.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "ForwardDXR"
            Tags
            {
                "LightMode" = "ForwardDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_FORWARD
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "GBufferDXR"
            Tags
            {
                "LightMode" = "GBufferDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma multi_compile _ MINIMAL_GBUFFER
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_GBUFFER
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Deferred/RaytracingIntersectonGBuffer.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/StandardLit/StandardLit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
        Pass
        {
            Name "PathTracingDXR"
            Tags
            {
                "LightMode" = "PathTracingDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 ps5
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _BLENDMODE_OFF _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _REFRACTION_OFF _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            // GraphKeywords: <None>
        
            // Early Instancing Defines
            // DotsInstancingOptions: <None>
        
            // Injected Instanced Properties (must be included before UnityInstancing.hlsl)
            // HybridV1InjectedBuiltinProperties: <None>
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
            #define ATTRIBUTES_NEED_NORMAL
            #define ATTRIBUTES_NEED_TANGENT
            #define ATTRIBUTES_NEED_TEXCOORD0
            #define ATTRIBUTES_NEED_TEXCOORD1
            #define ATTRIBUTES_NEED_TEXCOORD2
            #define ATTRIBUTES_NEED_COLOR
            #define VARYINGS_NEED_POSITION_WS
            #define VARYINGS_NEED_TANGENT_TO_WORLD
            #define VARYINGS_NEED_TEXCOORD0
            #define VARYINGS_NEED_TEXCOORD1
            #define VARYINGS_NEED_TEXCOORD2
            #define VARYINGS_NEED_COLOR
        
        
        
        
            #define SHADERPASS SHADERPASS_PATH_TRACING
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #define _AMBIENT_OCCLUSION 1
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #define _ENERGY_CONSERVING_SPECULAR 1
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float _AlphaCutoff;
        float4 _BaseColor;
        float4 _BaseColorMap_TexelSize;
        float _BaseUsePlanarUV;
        float4 _BaseTilingOffset;
        float4 _BaseNormalMap_TexelSize;
        float _BaseNormalScale;
        float4 _BaseMaskMap_TexelSize;
        float _BaseMetallic;
        float _BaseAORemapMin;
        float _BaseAORemapMax;
        float _BaseSmoothnessRemapMin;
        float _BaseSmoothnessRemapMax;
        float4 _LayerMask_TexelSize;
        float _Invert_Layer_Mask;
        float _Height_Transition;
        float _HeightMin;
        float _HeightMax;
        float _HeightOffset;
        float _HeightMin2;
        float _HeightMax2;
        float _HeightOffset2;
        float4 _Base2Color;
        float4 _Base2ColorMap_TexelSize;
        float4 _Base2TilingOffset;
        float _Base2UsePlanarUV;
        float4 _Base2NormalMap_TexelSize;
        float _Base2NormalScale;
        float4 _Base2MaskMap_TexelSize;
        float _Base2Metallic;
        float _Base2SmoothnessRemapMin;
        float _Base2SmoothnessRemapMax;
        float _Base2AORemapMin;
        float _Base2AORemapMax;
        float _USEDYNAMICCOVERTSTATICMASKF;
        float _CoverMaskPower;
        float _Cover_Amount;
        float _Cover_Amount_Grow_Speed;
        float _Cover_Max_Angle;
        float _Cover_Min_Height;
        float _Cover_Min_Height_Blending;
        float4 _CoverBaseColor;
        float4 _CoverBaseColorMap_TexelSize;
        float4 _CoverTilingOffset;
        float _CoverUsePlanarUV;
        float4 _CoverNormalMap_TexelSize;
        float _CoverNormalScale;
        float _CoverNormalBlendHardness;
        float _CoverHardness;
        float _CoverHeightMapMin;
        float _CoverHeightMapMax;
        float _CoverHeightMapOffset;
        float4 _CoverMaskMap_TexelSize;
        float _CoverMetallic;
        float _CoverAORemapMin;
        float _CoverAORemapMax;
        float _CoverSmoothnessRemapMin;
        float _CoverSmoothnessRemapMax;
        float4 _WetColor;
        float _WetSmoothness;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        TEXTURE2D(_BaseColorMap);
        SAMPLER(sampler_BaseColorMap);
        TEXTURE2D(_BaseNormalMap);
        SAMPLER(sampler_BaseNormalMap);
        TEXTURE2D(_BaseMaskMap);
        SAMPLER(sampler_BaseMaskMap);
        TEXTURE2D(_LayerMask);
        SAMPLER(sampler_LayerMask);
        TEXTURE2D(_Base2ColorMap);
        SAMPLER(sampler_Base2ColorMap);
        TEXTURE2D(_Base2NormalMap);
        SAMPLER(sampler_Base2NormalMap);
        TEXTURE2D(_Base2MaskMap);
        SAMPLER(sampler_Base2MaskMap);
        TEXTURE2D(_CoverBaseColorMap);
        SAMPLER(sampler_CoverBaseColorMap);
        TEXTURE2D(_CoverNormalMap);
        SAMPLER(sampler_CoverNormalMap);
        TEXTURE2D(_CoverMaskMap);
        SAMPLER(sampler_CoverMaskMap);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitPathTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
             float3 WorldSpaceNormal;
             float3 TangentSpaceNormal;
             float3 WorldSpaceTangent;
             float3 WorldSpaceBiTangent;
             float3 AbsoluteWorldSpacePosition;
             float4 uv0;
             float4 VertexColor;
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
        {
            RGBA = float4(R, G, B, A);
            RGB = float3(R, G, B);
            RG = float2(R, G);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
        Out = A * B;
        }
        
        void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
        {
            Out = UV * Tiling + Offset;
        }
        
        void Unity_Branch_float2(float Predicate, float2 True, float2 False, out float2 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float
        {
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_2EBA7A3B, float Boolean_7ABB9909, UnitySamplerState _SamplerState, Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float IN, out float4 XZ_2)
        {
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Property_30834f691775a0898a45b1c868520436_Out_0 = Boolean_7ABB9909;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0 = Vector4_2EBA7A3B;
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[0];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[1];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[2];
        float _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4 = _Property_8a66888ec47d0687ab1cb2f8abdc9da8_Out_0[3];
        float _Divide_e64179199923c58289b6aa94ea6c9178_Out_2;
        Unity_Divide_float(1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Divide_e64179199923c58289b6aa94ea6c9178_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_e64179199923c58289b6aa94ea6c9178_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_R_1, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_G_2);
        float2 _Vector2_f8d75f54e7705083bbec539a60185577_Out_0 = float2(_Split_2f0f52f6ef8c0e81af0da6476402bc1f_B_3, _Split_2f0f52f6ef8c0e81af0da6476402bc1f_A_4);
        float2 _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_16c15d3bbdd14b85bd48e3a6cb318af7_Out_0, _Vector2_f8d75f54e7705083bbec539a60185577_Out_0, _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3);
        float2 _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3;
        Unity_Branch_float2(_Property_30834f691775a0898a45b1c868520436_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_d91e2d25acd34686b562b7fe7e9d1d27_Out_3, _Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3);
        UnitySamplerState _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_e8746b9475c94530ba35ba8019ad2ae0_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_8e5a4e8f4d52fc8aadd1f46485afc933_Out_3));
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        XZ_2 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0;
        }
        
        void Unity_Add_float2(float2 A, float2 B, out float2 Out)
        {
            Out = A + B;
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Branch_float(float Predicate, float True, float False, out float Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A + B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        struct Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float
        {
        };
        
        void SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(float3 Vector3_88EEBB5E, float Vector1_DA0A37FA, float3 Vector3_79AA92F, float Vector1_F7E83F1E, float Vector1_1C9222A6, Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float IN, out float3 OutVector4_1)
        {
        float3 _Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0 = Vector3_88EEBB5E;
        float _Property_14119cc7eaf4128f991283d47cf72d85_Out_0 = Vector1_DA0A37FA;
        float _Property_48af0ad45e3f7f82932b938695d21391_Out_0 = Vector1_DA0A37FA;
        float _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0 = Vector1_F7E83F1E;
        float _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2;
        Unity_Maximum_float(_Property_48af0ad45e3f7f82932b938695d21391_Out_0, _Property_8a30b3ca12ff518fa473ccd686c7d503_Out_0, _Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2);
        float _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0 = Vector1_1C9222A6;
        float _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2;
        Unity_Subtract_float(_Maximum_c196e4a61637ea8381a3437c93f89ce2_Out_2, _Property_ee8d5fc69475d181be60c57e04ea8708_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2);
        float _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2;
        Unity_Subtract_float(_Property_14119cc7eaf4128f991283d47cf72d85_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2);
        float _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2;
        Unity_Maximum_float(_Subtract_e3a7713b556a1b8cb40aad97fc58d619_Out_2, 0, _Maximum_d02e48d92038448cb0345e5cf3779071_Out_2);
        float3 _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2;
        Unity_Multiply_float3_float3(_Property_dd1c841a04c03f8c85e7b00eb025ecda_Out_0, (_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2.xxx), _Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2);
        float3 _Property_c7292b3b08585f8c8670172b9a220bf0_Out_0 = Vector3_79AA92F;
        float _Property_5e920479576fad83ba1947728dcceab4_Out_0 = Vector1_F7E83F1E;
        float _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2;
        Unity_Subtract_float(_Property_5e920479576fad83ba1947728dcceab4_Out_0, _Subtract_61ca880c04c1758eb128f25c9faabd63_Out_2, _Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2);
        float _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2;
        Unity_Maximum_float(_Subtract_b7368f21be9e048aae7f90c8a2bfaae1_Out_2, 0, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2);
        float3 _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2;
        Unity_Multiply_float3_float3(_Property_c7292b3b08585f8c8670172b9a220bf0_Out_0, (_Maximum_216777d30802328eab607c8fe68ba3a1_Out_2.xxx), _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2);
        float3 _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2;
        Unity_Add_float3(_Multiply_79b0b5d7d3528b8395e1135339a090f2_Out_2, _Multiply_a856b52cd0848f86a6ae1af9b175935c_Out_2, _Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2);
        float _Add_356384b52728f583bd6e694bc1fc3738_Out_2;
        Unity_Add_float(_Maximum_d02e48d92038448cb0345e5cf3779071_Out_2, _Maximum_216777d30802328eab607c8fe68ba3a1_Out_2, _Add_356384b52728f583bd6e694bc1fc3738_Out_2);
        float _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2;
        Unity_Maximum_float(_Add_356384b52728f583bd6e694bc1fc3738_Out_2, 1E-05, _Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2);
        float3 _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        Unity_Divide_float3(_Add_86c6109dc4530b8c9763ef62b056ad4c_Out_2, (_Maximum_94a22f5ceb706e88bc16350a5d5d2a82_Out_2.xxx), _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2);
        OutVector4_1 = _Divide_d7291d1701d7058dbb5263194c1bed22_Out_2;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Sign_float3(float3 In, out float3 Out)
        {
            Out = sign(In);
        }
        
        void Unity_Multiply_float2_float2(float2 A, float2 B, out float2 Out)
        {
        Out = A * B;
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        struct Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float
        {
        float3 WorldSpaceNormal;
        float3 WorldSpaceTangent;
        float3 WorldSpaceBiTangent;
        float3 AbsoluteWorldSpacePosition;
        half4 uv0;
        };
        
        void SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(UnityTexture2D Texture2D_80A3D28F, float4 Vector4_82674548, float Boolean_9FF42DF6, UnitySamplerState _SamplerState, Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float IN, out float4 XZ_2)
        {
        float _Property_1ef12cf3201a938993fe6a7951b0e754_Out_0 = Boolean_9FF42DF6;
        UnityTexture2D _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0 = Texture2D_80A3D28F;
        float _Split_89ed63cb625cb3878c183d0b71c03400_R_1 = IN.AbsoluteWorldSpacePosition[0];
        float _Split_89ed63cb625cb3878c183d0b71c03400_G_2 = IN.AbsoluteWorldSpacePosition[1];
        float _Split_89ed63cb625cb3878c183d0b71c03400_B_3 = IN.AbsoluteWorldSpacePosition[2];
        float _Split_89ed63cb625cb3878c183d0b71c03400_A_4 = 0;
        float4 _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4;
        float3 _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5;
        float2 _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6;
        Unity_Combine_float(_Split_89ed63cb625cb3878c183d0b71c03400_R_1, _Split_89ed63cb625cb3878c183d0b71c03400_B_3, 0, 0, _Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, _Combine_cf2d04ff119ad88493f6460431765cbb_RGB_5, _Combine_cf2d04ff119ad88493f6460431765cbb_RG_6);
        float4 _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0 = Vector4_82674548;
        float _Split_a2e12fa5931da084b2949343a539dfd8_R_1 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[0];
        float _Split_a2e12fa5931da084b2949343a539dfd8_G_2 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[1];
        float _Split_a2e12fa5931da084b2949343a539dfd8_B_3 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[2];
        float _Split_a2e12fa5931da084b2949343a539dfd8_A_4 = _Property_3fa1d6f912feb481ba60f2e55e62e746_Out_0[3];
        float _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2;
        Unity_Divide_float(1, _Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2);
        float4 _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2;
        Unity_Multiply_float4_float4(_Combine_cf2d04ff119ad88493f6460431765cbb_RGBA_4, (_Divide_c36b770dfaa0bb8f85ab27da5fd794f0_Out_2.xxxx), _Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2);
        float2 _Vector2_6845d21872714d889783b0cb707df3e9_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_R_1, _Split_a2e12fa5931da084b2949343a539dfd8_G_2);
        float2 _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0 = float2(_Split_a2e12fa5931da084b2949343a539dfd8_B_3, _Split_a2e12fa5931da084b2949343a539dfd8_A_4);
        float2 _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3;
        Unity_TilingAndOffset_float(IN.uv0.xy, _Vector2_6845d21872714d889783b0cb707df3e9_Out_0, _Vector2_e2e2263627c6098e96a5b5d29350ad03_Out_0, _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3);
        float2 _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3;
        Unity_Branch_float2(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, (_Multiply_14cec4902d0a00829e4555071a1b8ad1_Out_2.xy), _TilingAndOffset_17582d056c0b8a8dab1017d37497fe59_Out_3, _Branch_1e152f3aac57448f8518bf2852c000c3_Out_3);
        UnitySamplerState _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0 = _SamplerState;
        float4 _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0 = SAMPLE_TEXTURE2D(_Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.tex, _Property_69f1ed7efd1b494e91f626b88ab2363c_Out_0.samplerstate, _Property_3e01b4d2fc68d48ba3acbba9d5881e59_Out_0.GetTransformedUV(_Branch_1e152f3aac57448f8518bf2852c000c3_Out_3));
        _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.rgb = UnpackNormal(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0);
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.r;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.g;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.b;
        float _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_A_7 = _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.a;
        float2 _Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0 = float2(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_R_4, _SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_G_5);
        float3 _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1;
        Unity_Sign_float3(IN.WorldSpaceNormal, _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1);
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_R_1 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[0];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_G_2 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[1];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_B_3 = _Sign_3a6ebf59931cf08cb0482e0144ddac24_Out_1[2];
        float _Split_6299d4ddcc4c74828aea40a46fdb896e_A_4 = 0;
        float2 _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0 = float2(_Split_6299d4ddcc4c74828aea40a46fdb896e_G_2, 1);
        float2 _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2;
        Unity_Multiply_float2_float2(_Vector2_ad6bd100e273d78fa409a30a77bfa2cc_Out_0, _Vector2_b76cb1842101e58b9e636d49b075c612_Out_0, _Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2);
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1 = IN.WorldSpaceNormal[0];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2 = IN.WorldSpaceNormal[1];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3 = IN.WorldSpaceNormal[2];
        float _Split_5ed44bf2eca0868f81eb18100f49d1fa_A_4 = 0;
        float2 _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0 = float2(_Split_5ed44bf2eca0868f81eb18100f49d1fa_R_1, _Split_5ed44bf2eca0868f81eb18100f49d1fa_B_3);
        float2 _Add_1145b2f896593d80aa864a34e6702562_Out_2;
        Unity_Add_float2(_Multiply_31e8db88ee20c985a9850d1a58f3282b_Out_2, _Vector2_70e5837843f28b8b9d64cada3697bd5a_Out_0, _Add_1145b2f896593d80aa864a34e6702562_Out_2);
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_R_1 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[0];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2 = _Add_1145b2f896593d80aa864a34e6702562_Out_2[1];
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_B_3 = 0;
        float _Split_2bc77ca2d17bd78cb2383770ce50b179_A_4 = 0;
        float _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2;
        Unity_Multiply_float_float(_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_B_6, _Split_5ed44bf2eca0868f81eb18100f49d1fa_G_2, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2);
        float3 _Vector3_433840b555db308b97e9b14b6a957195_Out_0 = float3(_Split_2bc77ca2d17bd78cb2383770ce50b179_R_1, _Multiply_ab12aea87465a78eaf7fc66c2598d266_Out_2, _Split_2bc77ca2d17bd78cb2383770ce50b179_G_2);
        float3x3 Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World = float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal);
        float3 _Transform_c7914cc45a011c89b3f53c55afb51673_Out_1 = TransformWorldToTangent(_Vector3_433840b555db308b97e9b14b6a957195_Out_0.xyz, Transform_c7914cc45a011c89b3f53c55afb51673_tangentTransform_World);
        float3 _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1;
        Unity_Normalize_float3(_Transform_c7914cc45a011c89b3f53c55afb51673_Out_1, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1);
        float3 _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3;
        Unity_Branch_float3(_Property_1ef12cf3201a938993fe6a7951b0e754_Out_0, _Normalize_09bf8a2bd0a4d38e8b97d5c674f79b44_Out_1, (_SampleTexture2D_35ddc0da4b30e48b83ca2d39af2aba2c_RGBA_0.xyz), _Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3);
        XZ_2 = (float4(_Branch_9eadf909a90f2f80880f8c56ecc2a91f_Out_3, 1.0));
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Absolute_float(float In, out float Out)
        {
            Out = abs(In);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float Metallic;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            UnityTexture2D _Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0 = UnityBuildTexture2DStructNoScale(_BaseColorMap);
            float4 _Property_8ec0d512145619859d288abab740e3bf_Out_0 = _BaseTilingOffset;
            float _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0 = _BaseUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4.uv0 = IN.uv0;
            float4 _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_821e07b38fd0a08d85c4dd6e5b6bbac9_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4, _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2);
            float4 _Property_41859d117584758eb8002ecc938f9bce_Out_0 = _BaseColor;
            float4 _Multiply_4d0f82599060228a9092027fd43912c8_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2, _Property_41859d117584758eb8002ecc938f9bce_Out_0, _Multiply_4d0f82599060228a9092027fd43912c8_Out_2);
            UnityTexture2D _Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0 = UnityBuildTexture2DStructNoScale(_BaseMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_b6bb43285f18e0838565e2920c32d293;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_b6bb43285f18e0838565e2920c32d293.uv0 = IN.uv0;
            float4 _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_bb9b47702e64ec8c8d8ad011fd521576_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_b6bb43285f18e0838565e2920c32d293, _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2);
            float _Split_b46220d232328a87b0ab1f7cf442b2da_R_1 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[0];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_G_2 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[1];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_B_3 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[2];
            float _Split_b46220d232328a87b0ab1f7cf442b2da_A_4 = _PlanarNM_b6bb43285f18e0838565e2920c32d293_XZ_2[3];
            float _Property_a859bb55a2b9de80a42270bed0d5b617_Out_0 = _HeightMin;
            float _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0 = _HeightMax;
            float2 _Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0 = float2(_Property_a859bb55a2b9de80a42270bed0d5b617_Out_0, _Property_6a5e94d6990bd38eace024b5a5366dcd_Out_0);
            float _Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0 = _HeightOffset;
            float2 _Add_810cbda844e984809d8449d02f1fe34b_Out_2;
            Unity_Add_float2(_Vector2_b1ffc7c201f7a28db3b61a7af725ce14_Out_0, (_Property_f9c5ca34c6c20784b73fd90fa9dbbb70_Out_0.xx), _Add_810cbda844e984809d8449d02f1fe34b_Out_2);
            float _Remap_a62dc18837275d80ad5024009a6623c0_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_B_3, float2 (0, 1), _Add_810cbda844e984809d8449d02f1fe34b_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3);
            UnityTexture2D _Property_f0e70a431fc2958d9010b03283beee34_Out_0 = UnityBuildTexture2DStructNoScale(_Base2ColorMap);
            float4 _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0 = _Base2TilingOffset;
            float _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0 = _Base2UsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c1bb923588566183a75a0e765556574f;
            _PlanarNM_c1bb923588566183a75a0e765556574f.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c1bb923588566183a75a0e765556574f.uv0 = IN.uv0;
            float4 _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_f0e70a431fc2958d9010b03283beee34_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c1bb923588566183a75a0e765556574f, _PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2);
            float4 _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0 = _Base2Color;
            float4 _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c1bb923588566183a75a0e765556574f_XZ_2, _Property_913f955d98f27d8eae1e9aa2594d6903_Out_0, _Multiply_98c5efd706ed988babc5c29fc647d990_Out_2);
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1 = IN.VertexColor[0];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2 = IN.VertexColor[1];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3 = IN.VertexColor[2];
            float _Split_c65e7224a5689389a1bbab5e86f5f2f3_A_4 = IN.VertexColor[3];
            float _Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0 = _Invert_Layer_Mask;
            UnityTexture2D _Property_e4f36987ce299e8594a2a5fccce28358_Out_0 = UnityBuildTexture2DStructNoScale(_LayerMask);
            float4 _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0 = SAMPLE_TEXTURE2D(_Property_e4f36987ce299e8594a2a5fccce28358_Out_0.tex, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.samplerstate, _Property_e4f36987ce299e8594a2a5fccce28358_Out_0.GetTransformedUV(IN.uv0.xy));
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.r;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_G_5 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.g;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_B_6 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.b;
            float _SampleTexture2D_ac5550b56f005784b219743fdaf08340_A_7 = _SampleTexture2D_ac5550b56f005784b219743fdaf08340_RGBA_0.a;
            float _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1;
            Unity_OneMinus_float(_SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1);
            float _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3;
            Unity_Branch_float(_Property_7dd4469e1fe42e80a23268de8f2065d3_Out_0, _OneMinus_e02c27223b4d638b86c4079d89229b60_Out_1, _SampleTexture2D_ac5550b56f005784b219743fdaf08340_R_4, _Branch_1789de63467b82898d8a58cc65bd92ba_Out_3);
            UnityTexture2D _Property_41d7b60d37a127849d09e1dd2734aaec_Out_0 = UnityBuildTexture2DStructNoScale(_Base2MaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d.uv0 = IN.uv0;
            float4 _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_41d7b60d37a127849d09e1dd2734aaec_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d, _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2);
            float _Split_1eec1e50d2a97689ae4380a73b735288_R_1 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[0];
            float _Split_1eec1e50d2a97689ae4380a73b735288_G_2 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[1];
            float _Split_1eec1e50d2a97689ae4380a73b735288_B_3 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[2];
            float _Split_1eec1e50d2a97689ae4380a73b735288_A_4 = _PlanarNM_7f1a0e238f473f8f9283ee3c842f919d_XZ_2[3];
            float _Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0 = _HeightMin2;
            float _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0 = _HeightMax2;
            float2 _Vector2_5364f757f74cad88a0e969832588a923_Out_0 = float2(_Property_040e1f03f6c2558296bcbe40d45fb54a_Out_0, _Property_3b0df61398e1d685acb7c9268bbe05ab_Out_0);
            float _Property_d382ce88f58fb386ad463f679320d9c6_Out_0 = _HeightOffset2;
            float2 _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2;
            Unity_Add_float2(_Vector2_5364f757f74cad88a0e969832588a923_Out_0, (_Property_d382ce88f58fb386ad463f679320d9c6_Out_0.xx), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2);
            float _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_B_3, float2 (0, 1), _Add_dc6e0e48074add8d8e342fdeb48787de_Out_2, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3);
            float _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2;
            Unity_Multiply_float_float(_Branch_1789de63467b82898d8a58cc65bd92ba_Out_3, _Remap_ddff7201bd573f8895ae4fc5b7d40bf2_Out_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2);
            float _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_B_3, _Multiply_bb05a41ad209278eb78db9a948be6125_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2);
            float _Property_088fd1efe6b3f6879705588500bf30bc_Out_0 = _Height_Transition;
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_709e53664a4175808a76121d09d25807;
            float3 _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float((_Multiply_4d0f82599060228a9092027fd43912c8_Out_2.xyz), _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, (_Multiply_98c5efd706ed988babc5c29fc647d990_Out_2.xyz), _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_709e53664a4175808a76121d09d25807, _HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1);
            UnityTexture2D _Property_a155ddc33ed90685a5ab0edcf158a343_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0 = _CoverTilingOffset;
            float _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0 = _CoverUsePlanarUV;
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1.uv0 = IN.uv0;
            float4 _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_a155ddc33ed90685a5ab0edcf158a343_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1, _PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2);
            float4 _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0 = _CoverBaseColor;
            float4 _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2;
            Unity_Multiply_float4_float4(_PlanarNM_c2fe9ab385b28685a6123a5c44b88fd1_XZ_2, _Property_c3be5593fd661b8dafbd04f26b8ec9ac_Out_0, _Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2);
            float _Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0 = _USEDYNAMICCOVERTSTATICMASKF;
            UnityTexture2D _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0 = UnityBuildTexture2DStructNoScale(_CoverBaseColorMap);
            float4 _UV_429c95affe88aa8694076115c99a0769_Out_0 = IN.uv0;
            float4 _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0 = SAMPLE_TEXTURE2D(_Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.tex, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.samplerstate, _Property_0894b31753dd40b5a3c5e41b7530ddf6_Out_0.GetTransformedUV((_UV_429c95affe88aa8694076115c99a0769_Out_0.xy)));
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_R_4 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.r;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_G_5 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.g;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_B_6 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.b;
            float _SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7 = _SampleTexture2D_2723da80b8a2528381ef199c0415beae_RGBA_0.a;
            float _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0 = _CoverMaskPower;
            float _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2;
            Unity_Multiply_float_float(_SampleTexture2D_2723da80b8a2528381ef199c0415beae_A_7, _Property_4598a5959afa5685b13cb10bef3e3b8d_Out_0, _Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2);
            float _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3;
            Unity_Clamp_float(_Multiply_5448c38b13b40c89bd8699ceebd8a170_Out_2, 0, 1, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3);
            UnityTexture2D _Property_147b07430832c98eb0a470557ee61c5e_Out_0 = UnityBuildTexture2DStructNoScale(_BaseNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_692960de14d47b8dbfb207b3e9f74790;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_692960de14d47b8dbfb207b3e9f74790.uv0 = IN.uv0;
            float4 _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_147b07430832c98eb0a470557ee61c5e_Out_0, _Property_8ec0d512145619859d288abab740e3bf_Out_0, _Property_4d6673db70b3ce8da03e0692dd529e45_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_692960de14d47b8dbfb207b3e9f74790, _PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2);
            float _Property_72e436a108ad64868e46d548c585c5f3_Out_0 = _BaseNormalScale;
            float3 _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_692960de14d47b8dbfb207b3e9f74790_XZ_2.xyz), _Property_72e436a108ad64868e46d548c585c5f3_Out_0, _NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2);
            UnityTexture2D _Property_30f2c188c6b1e688ae667a89dbd70992_Out_0 = UnityBuildTexture2DStructNoScale(_Base2NormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a.uv0 = IN.uv0;
            float4 _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_30f2c188c6b1e688ae667a89dbd70992_Out_0, _Property_505b745e4ff42080ba6edcadb9575a6a_Out_0, _Property_718c7cdcb1012680ab3b95462b4787c7_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a, _PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2);
            float _Property_13b1e8709820828195ef548d1d72ea04_Out_0 = _Base2NormalScale;
            float3 _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_6cd9e5494e0bde88a9d45564daf0821a_XZ_2.xyz), _Property_13b1e8709820828195ef548d1d72ea04_Out_0, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6;
            float3 _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_NormalStrength_366affc5c8b42482a633d201ef52b9d6_Out_2, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _NormalStrength_61e15bbaec29ca8098158de814ef56cb_Out_2, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6, _HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1);
            UnityTexture2D _Property_d7e9139e0ac6718b89c610009c28a25a_Out_0 = UnityBuildTexture2DStructNoScale(_CoverNormalMap);
            Bindings_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float _PlanarNMn_2e288bef98384580aaab10e906ca8004;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceNormal = IN.WorldSpaceNormal;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceTangent = IN.WorldSpaceTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNMn_2e288bef98384580aaab10e906ca8004.uv0 = IN.uv0;
            float4 _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2;
            SG_PlanarNMn_1b93a87456f9d4c419321d0cd92bd6c8_float(_Property_d7e9139e0ac6718b89c610009c28a25a_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNMn_2e288bef98384580aaab10e906ca8004, _PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2);
            float _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0 = _CoverNormalBlendHardness;
            float3 _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2;
            Unity_NormalStrength_float((_PlanarNMn_2e288bef98384580aaab10e906ca8004_XZ_2.xyz), _Property_68a36c67be59b187b5d72cfb5dddf7b6_Out_0, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2);
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_R_1 = IN.WorldSpaceNormal[0];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2 = IN.WorldSpaceNormal[1];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_B_3 = IN.WorldSpaceNormal[2];
            float _Split_8ff22a6bdd437780ac7ea5963e1c5bb4_A_4 = 0;
            float _Property_28052b023ac35c8e9a95b30327681cc5_Out_0 = _Cover_Amount;
            float _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0 = _Cover_Amount_Grow_Speed;
            float _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2;
            Unity_Subtract_float(4, _Property_7749c0d5b28c14869ab3ba35d226788b_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2);
            float _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2;
            Unity_Divide_float(_Property_28052b023ac35c8e9a95b30327681cc5_Out_0, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Divide_c77b003bf1ce13828c94a705676e2b30_Out_2);
            float _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1;
            Unity_Absolute_float(_Divide_c77b003bf1ce13828c94a705676e2b30_Out_2, _Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1);
            float _Power_a9431dbce44a528f9ee7095adfa10556_Out_2;
            Unity_Power_float(_Absolute_9a4b0fdc5b7d008ebec417b8b6cedef7_Out_1, _Subtract_e5dc2afce7ff588fa1d4c91f78de7575_Out_2, _Power_a9431dbce44a528f9ee7095adfa10556_Out_2);
            float _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3;
            Unity_Clamp_float(_Power_a9431dbce44a528f9ee7095adfa10556_Out_2, 0, 2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3);
            float _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2;
            Unity_Multiply_float_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2);
            float _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1;
            Unity_Saturate_float(_Multiply_143da4886728ff868f10e9cfa6940ea0_Out_2, _Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1);
            float _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3;
            Unity_Clamp_float(_Split_8ff22a6bdd437780ac7ea5963e1c5bb4_G_2, 0, 0.9999, _Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3);
            float _Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0 = _Cover_Max_Angle;
            float _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2;
            Unity_Divide_float(_Property_58f42b34c7f0728f8c98e00a3e3a5726_Out_0, 45, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2);
            float _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1;
            Unity_OneMinus_float(_Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1);
            float _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2;
            Unity_Subtract_float(_Clamp_9c0a88ffc7be288cbe97d3e13a014fe8_Out_3, _OneMinus_8e6f5b1570dc8c8b8afb036328281675_Out_1, _Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2);
            float _Clamp_2b888688983edd82ac250226d9378893_Out_3;
            Unity_Clamp_float(_Subtract_5348fb3702fea78d9ee10dbf81ede29c_Out_2, 0, 2, _Clamp_2b888688983edd82ac250226d9378893_Out_3);
            float _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2;
            Unity_Divide_float(1, _Divide_b785767ecc1928889893fa60eac4e5fb_Out_2, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2);
            float _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2;
            Unity_Multiply_float_float(_Clamp_2b888688983edd82ac250226d9378893_Out_3, _Divide_5615f16c20214d888a2e727ff7c5f5ff_Out_2, _Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2);
            float _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1;
            Unity_Absolute_float(_Multiply_89aeffc0ad067981a18e6a77948b2b49_Out_2, _Absolute_e1a8d6c669ee448697e2232685645f77_Out_1);
            float _Property_4879e96694aee98c9d4ecd329a571123_Out_0 = _CoverHardness;
            float _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2;
            Unity_Power_float(_Absolute_e1a8d6c669ee448697e2232685645f77_Out_1, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2);
            float _Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0 = _Cover_Min_Height;
            float _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1;
            Unity_OneMinus_float(_Property_b66201e787ab7b83a55abc6ddd3fe1fd_Out_0, _OneMinus_87c740d245de388db4fe5f4958de0668_Out_1);
            float _Split_ae16de7cacf9d0878aba1467f193d681_R_1 = IN.AbsoluteWorldSpacePosition[0];
            float _Split_ae16de7cacf9d0878aba1467f193d681_G_2 = IN.AbsoluteWorldSpacePosition[1];
            float _Split_ae16de7cacf9d0878aba1467f193d681_B_3 = IN.AbsoluteWorldSpacePosition[2];
            float _Split_ae16de7cacf9d0878aba1467f193d681_A_4 = 0;
            float _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2;
            Unity_Add_float(_OneMinus_87c740d245de388db4fe5f4958de0668_Out_1, _Split_ae16de7cacf9d0878aba1467f193d681_G_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2);
            float _Add_448f30a2cd792b868416a253a1c502bb_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, 1, _Add_448f30a2cd792b868416a253a1c502bb_Out_2);
            float _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3;
            Unity_Clamp_float(_Add_448f30a2cd792b868416a253a1c502bb_Out_2, 0, 1, _Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3);
            float _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0 = _Cover_Min_Height_Blending;
            float _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2;
            Unity_Add_float(_Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Property_98b8c0fc7e8f9b88b8d7d9dd28ed8aca_Out_0, _Add_0edbe9f424de6d8089b453804bc6ec74_Out_2);
            float _Divide_bacd243000beaa86b28174bd47716791_Out_2;
            Unity_Divide_float(_Add_0edbe9f424de6d8089b453804bc6ec74_Out_2, _Add_9d6e1dd03919c88bb01e77a9a2b6b59c_Out_2, _Divide_bacd243000beaa86b28174bd47716791_Out_2);
            float _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1;
            Unity_OneMinus_float(_Divide_bacd243000beaa86b28174bd47716791_Out_2, _OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1);
            float _Add_58dd4a9dfd5655818255c74dd17921da_Out_2;
            Unity_Add_float(_OneMinus_dd51a0c56dbb9b8b8882c6d36bfadd50_Out_1, -0.5, _Add_58dd4a9dfd5655818255c74dd17921da_Out_2);
            float _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3;
            Unity_Clamp_float(_Add_58dd4a9dfd5655818255c74dd17921da_Out_2, 0, 1, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3);
            float _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2;
            Unity_Add_float(_Clamp_53d91568d0627d8a9cac8deecdd003a8_Out_3, _Clamp_5b36f07b81ef6f87a93aefa8fcb815b4_Out_3, _Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2);
            float _Clamp_130844801cc2148bb64804d2328686eb_Out_3;
            Unity_Clamp_float(_Add_5ef49a57de2cdf85b0e894bfa07f6f14_Out_2, 0, 1, _Clamp_130844801cc2148bb64804d2328686eb_Out_3);
            float _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2;
            Unity_Multiply_float_float(_Power_ca1f1906c90fb785bfe520b7faefc3cd_Out_2, _Clamp_130844801cc2148bb64804d2328686eb_Out_3, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2);
            float _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2;
            Unity_Multiply_float_float(_Saturate_04686ab19029f68c8fb9e7a115b207b1_Out_1, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2);
            float3 _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3;
            Unity_Lerp_float3(_HeightBlend_a07ffbde1a54da85a9f0a69f314eacd6_OutVector4_1, _NormalStrength_c1926aecf0513f85b06338b911ba9f25_Out_2, (_Multiply_edc44afd10069b8e80460ceee1cba8f0_Out_2.xxx), _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3);
            float3x3 Transform_7b989d7e334602829978dc745a2baca5_transposeTangent = transpose(float3x3(IN.WorldSpaceTangent, IN.WorldSpaceBiTangent, IN.WorldSpaceNormal));
            float3 _Transform_7b989d7e334602829978dc745a2baca5_Out_1 = normalize(mul(Transform_7b989d7e334602829978dc745a2baca5_transposeTangent, _Lerp_05179f1a9a06b084b2d83e8bce908cce_Out_3.xyz).xyz);
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_R_1 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[0];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[1];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_B_3 = _Transform_7b989d7e334602829978dc745a2baca5_Out_1[2];
            float _Split_44ee9f8d0d54618cabce22ec49a8e7d3_A_4 = 0;
            float _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2;
            Unity_Multiply_float_float(_Split_44ee9f8d0d54618cabce22ec49a8e7d3_G_2, _Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2);
            float _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2;
            Unity_Multiply_float_float(_Clamp_815ffdd53cc1c889aa00f73784cb71e7_Out_3, _Property_4879e96694aee98c9d4ecd329a571123_Out_0, _Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2);
            float _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2;
            Unity_Multiply_float_float(_Multiply_1e7ca8eeb2afb68a96897072c537d835_Out_2, _Multiply_4a38c41b77a2458085ff4ae52ba3c21c_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2);
            float _Multiply_dd6ce40548593687a3441a83047275eb_Out_2;
            Unity_Multiply_float_float(_Multiply_61fc6a92f0e952858b5d99f2caeb09a3_Out_2, _Multiply_a16d49a3ef8d76899c86b7d84d20ef1f_Out_2, _Multiply_dd6ce40548593687a3441a83047275eb_Out_2);
            UnityTexture2D _Property_3702de305e11e085a40d7731b582d541_Out_0 = UnityBuildTexture2DStructNoScale(_CoverMaskMap);
            Bindings_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.AbsoluteWorldSpacePosition = IN.AbsoluteWorldSpacePosition;
            _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792.uv0 = IN.uv0;
            float4 _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2;
            SG_PlanarNM_c0f081da9c567704ea36e7dd38cedcf6_float(_Property_3702de305e11e085a40d7731b582d541_Out_0, _Property_256beda96caf2d8aa05d3de41fc08d3d_Out_0, _Property_162708fdf26bb986a9d5db43afc4f8e1_Out_0, UnityBuildSamplerStateStruct(SamplerState_Linear_Repeat), _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792, _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2);
            float _Split_1ef51260eb09388e8cdae9167826d51b_R_1 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[0];
            float _Split_1ef51260eb09388e8cdae9167826d51b_G_2 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[1];
            float _Split_1ef51260eb09388e8cdae9167826d51b_B_3 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[2];
            float _Split_1ef51260eb09388e8cdae9167826d51b_A_4 = _PlanarNM_a94e5fcc3a22808d84a3ea26bcf69792_XZ_2[3];
            float _Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0 = _CoverHeightMapMin;
            float _Property_2b4b16173941968fbecea0823b164445_Out_0 = _CoverHeightMapMax;
            float2 _Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0 = float2(_Property_ba1b8c5efd5601899ed0dcccc561a69e_Out_0, _Property_2b4b16173941968fbecea0823b164445_Out_0);
            float _Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0 = _CoverHeightMapOffset;
            float2 _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2;
            Unity_Add_float2(_Vector2_1f93fdd913f3998abfc7d79aa3275820_Out_0, (_Property_7aaf6f0977047a809a6721a4b0ae96a9_Out_0.xx), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2);
            float _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_B_3, float2 (0, 1), _Add_d8e352a2ddee3983892b85b8a37a9d71_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3);
            float _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2;
            Unity_Multiply_float_float(_Multiply_dd6ce40548593687a3441a83047275eb_Out_2, _Remap_4af7360438304e8b9a247168cf9a60cf_Out_3, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2);
            float _Multiply_2721053c1729d280a19cb637d7cab730_Out_2;
            Unity_Multiply_float_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_G_2, _Multiply_435f6b8a2f35bc809d29f45620bebb21_Out_2, _Multiply_2721053c1729d280a19cb637d7cab730_Out_2);
            float _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1;
            Unity_Saturate_float(_Multiply_2721053c1729d280a19cb637d7cab730_Out_2, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1);
            float _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2;
            Unity_Multiply_float_float(_Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Saturate_269cfab86e2abe83819a3afa7b3eeda2_Out_1, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2);
            float _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3;
            Unity_Branch_float(_Property_6f84ca272c9d368f9cdf0c02dc5ddf5e_Out_0, _Multiply_c1b6707e1b5d0482a9a356293cec8e5e_Out_2, _Clamp_1e6fa04cc341fd81a68153ee61690d70_Out_3, _Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3);
            float3 _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3;
            Unity_Lerp_float3(_HeightBlend_709e53664a4175808a76121d09d25807_OutVector4_1, (_Multiply_b08794693505bd8e8c04b9ba1610d394_Out_2.xyz), (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3);
            float4 _Property_3ef757d184da9889bc95e8a2d632324d_Out_0 = _WetColor;
            float3 _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2;
            Unity_Multiply_float3_float3((_Property_3ef757d184da9889bc95e8a2d632324d_Out_0.xyz), _Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2);
            float _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1;
            Unity_OneMinus_float(_Split_c65e7224a5689389a1bbab5e86f5f2f3_R_1, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1);
            float3 _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            Unity_Lerp_float3(_Lerp_562b79f1df34b88e9a8a7431d434b435_Out_3, _Multiply_31d5c3c7401d728f9c65f85d00f51ca5_Out_2, (_OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1.xxx), _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3);
            float _Split_b97bf021e1406586ba79bf2529804b8e_R_1 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[0];
            float _Split_b97bf021e1406586ba79bf2529804b8e_G_2 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[1];
            float _Split_b97bf021e1406586ba79bf2529804b8e_B_3 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[2];
            float _Split_b97bf021e1406586ba79bf2529804b8e_A_4 = _PlanarNM_8ea202bae3c8428bb8265f4fd9ee7df4_XZ_2[3];
            float _Property_080c0d25570d018385157457afd26915_Out_0 = _AlphaCutoff;
            float _Property_bbb7f63dc018f9828732f80495a95444_Out_0 = _BaseMetallic;
            float _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2;
            Unity_Multiply_float_float(_Split_b46220d232328a87b0ab1f7cf442b2da_R_1, _Property_bbb7f63dc018f9828732f80495a95444_Out_0, _Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2);
            float _Property_8142f12b781ad08680220297dab56f14_Out_0 = _BaseAORemapMin;
            float _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0 = _BaseAORemapMax;
            float2 _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0 = float2(_Property_8142f12b781ad08680220297dab56f14_Out_0, _Property_48e1c5285b48c78e8af19e38f4bd77f9_Out_0);
            float _Remap_f4684fae31257d82aa14c39233760e21_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_G_2, float2 (0, 1), _Vector2_344526038e228b85ad9c2d33f000c5ea_Out_0, _Remap_f4684fae31257d82aa14c39233760e21_Out_3);
            float _Property_0682b9e13137ec8f8de23962e6db211c_Out_0 = _BaseSmoothnessRemapMin;
            float _Property_0edea7916ed7a189a62b0faf2c274601_Out_0 = _BaseSmoothnessRemapMax;
            float2 _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0 = float2(_Property_0682b9e13137ec8f8de23962e6db211c_Out_0, _Property_0edea7916ed7a189a62b0faf2c274601_Out_0);
            float _Remap_857d26677c8e8a809704b89dbca71045_Out_3;
            Unity_Remap_float(_Split_b46220d232328a87b0ab1f7cf442b2da_A_4, float2 (0, 1), _Vector2_8d45bee64b64f087b44fb9b02317dfdd_Out_0, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float3 _Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0 = float3(_Multiply_ee089bb3595c0c8da7ca2ff054def6d5_Out_2, _Remap_f4684fae31257d82aa14c39233760e21_Out_3, _Remap_857d26677c8e8a809704b89dbca71045_Out_3);
            float _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0 = _Base2Metallic;
            float _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2;
            Unity_Multiply_float_float(_Split_1eec1e50d2a97689ae4380a73b735288_R_1, _Property_da25d24e4fd2108fa3e2cae8cf268ad1_Out_0, _Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2);
            float _Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0 = _Base2AORemapMin;
            float _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0 = _Base2AORemapMax;
            float2 _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0 = float2(_Property_02bd8e6a672d1f8ebd2c50b4d822d29c_Out_0, _Property_7c7a0acfa72e4a8d9e89fd92eb4fde51_Out_0);
            float _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_G_2, float2 (0, 1), _Vector2_61efe41bd1ca5283ae09f418d56dce98_Out_0, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3);
            float _Property_e93e026149f1bb888d5c7f055f55d34c_Out_0 = _Base2SmoothnessRemapMin;
            float _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0 = _Base2SmoothnessRemapMax;
            float2 _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0 = float2(_Property_e93e026149f1bb888d5c7f055f55d34c_Out_0, _Property_9e1d05a5f3bb4687bd2a9ef8e632a88c_Out_0);
            float _Remap_098b362070432e8e9aa6ed165b86b141_Out_3;
            Unity_Remap_float(_Split_1eec1e50d2a97689ae4380a73b735288_A_4, float2 (0, 1), _Vector2_d434b3a98fac8f88a713affdbe931846_Out_0, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            float3 _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0 = float3(_Multiply_1a54c23c25172e89acacc2ea32718ab1_Out_2, _Remap_09fcf6edbba96e8daee966084ddc87eb_Out_3, _Remap_098b362070432e8e9aa6ed165b86b141_Out_3);
            Bindings_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c;
            float3 _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1;
            SG_HeightBlend_d15b6fb865d3b6d4ebc1fd476c3ad135_float(_Vector3_1f83d62db7392b81beeecb62c44f56c5_Out_0, _Remap_a62dc18837275d80ad5024009a6623c0_Out_3, _Vector3_f4a7e19d772ca88795286111ab15ccc1_Out_0, _Multiply_c1878c5353ece98688c9aef912b6f19a_Out_2, _Property_088fd1efe6b3f6879705588500bf30bc_Out_0, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c, _HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1);
            float _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0 = _CoverMetallic;
            float _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2;
            Unity_Multiply_float_float(_Split_1ef51260eb09388e8cdae9167826d51b_R_1, _Property_0187ddd5583a3d86a3c4c2444b45e777_Out_0, _Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2);
            float _Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0 = _CoverAORemapMin;
            float _Property_506cf024c6db098fbc150277952a7bee_Out_0 = _CoverAORemapMax;
            float2 _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0 = float2(_Property_5cc07bc49e1bf582b5c1b52606eec56f_Out_0, _Property_506cf024c6db098fbc150277952a7bee_Out_0);
            float _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_G_2, float2 (0, 1), _Vector2_ffa116a725445282a83acc70377ff4e1_Out_0, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3);
            float _Property_36782180ac25b489baf611efb6d0d9ed_Out_0 = _CoverSmoothnessRemapMin;
            float _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0 = _CoverSmoothnessRemapMax;
            float2 _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0 = float2(_Property_36782180ac25b489baf611efb6d0d9ed_Out_0, _Property_6c0666df4add418b8e32b0e4275b1c27_Out_0);
            float _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3;
            Unity_Remap_float(_Split_1ef51260eb09388e8cdae9167826d51b_A_4, float2 (0, 1), _Vector2_b0c047c56338e78abcd740717a8d6900_Out_0, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0 = float3(_Multiply_0248a4a17e4abe868ff7c5ec2a5c8d2f_Out_2, _Remap_02e4c7480ddeca88aa886be18ce15353_Out_3, _Remap_1f96cc6fc648098f8cb49680f75d5a1e_Out_3);
            float3 _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3;
            Unity_Lerp_float3(_HeightBlend_d3702ea647a00788a9589b6dd2f39e3c_OutVector4_1, _Vector3_48cf085b9f7fd28e89fe4361decf0fec_Out_0, (_Branch_0809ddc3ad01048f89c30291bc97cac7_Out_3.xxx), _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3);
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[0];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[1];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3 = _Lerp_48cc6a544b837c85a967cc83aab4e3fb_Out_3[2];
            float _Split_645358fc1f0e278fbfc2ccb5594c95e3_A_4 = 0;
            float _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0 = _WetSmoothness;
            float _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            Unity_Lerp_float(_Split_645358fc1f0e278fbfc2ccb5594c95e3_B_3, _Property_c2c14c6e59fff685aa34dd6b96e602b1_Out_0, _OneMinus_c5515a198e251e87b555e35afe5ffe07_Out_1, _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3);
            surface.BaseColor = _Lerp_c2c1091736bf7f849e83df1c9c02b850_Out_3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _Split_b97bf021e1406586ba79bf2529804b8e_A_4;
            surface.AlphaClipThreshold = _Property_080c0d25570d018385157457afd26915_Out_0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _Lerp_d69b881388ff3d87bbdb99ca85854182_Out_3;
            surface.Occlusion = _Split_645358fc1f0e278fbfc2ccb5594c95e3_G_2;
            surface.NormalTS = IN.TangentSpaceNormal;
            surface.Metallic = _Split_645358fc1f0e278fbfc2ccb5594c95e3_R_1;
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            output.WorldSpaceNormal =                           normalize(input.tangentToWorld[2].xyz);
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
            output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
            output.WorldSpaceTangent =                          input.tangentToWorld[0].xyz;
            output.WorldSpaceBiTangent =                        input.tangentToWorld[1].xyz;
            output.AbsoluteWorldSpacePosition =                 GetAbsolutePositionWS(input.positionRWS);
            output.uv0 =                                        input.texCoord0;
            output.VertexColor =                                input.color;
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
            surfaceData.baseColor =                 surfaceDescription.BaseColor;
            surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
            surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
            surfaceData.metallic =                  surfaceDescription.Metallic;
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            #ifdef _DOUBLESIDED_ON
                float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
            #else
                float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
            #endif
        
            // normal delivered to master node
            GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            #if HAVE_DECALS
                if (_EnableDecals)
                {
                    float alpha = 1.0;
                    alpha = surfaceDescription.Alpha;
        
                    // Both uses and modifies 'surfaceData.normalWS'.
                    DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                    ApplyDecalToSurfaceData(decalSurfaceData, fragInputs.tangentToWorld[2], surfaceData);
                }
            #endif
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
                builtinData.emissiveColor = surfaceDescription.Emission;
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassPathTracing.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
            ENDHLSL
        }
    }
    CustomEditorForRenderPipeline "Rendering.HighDefinition.LitShaderGraphGUI" "UnityEngine.Rendering.HighDefinition.HDRenderPipelineAsset"
    CustomEditor "UnityEditor.ShaderGraph.GenericShaderGraphMaterialGUI"
    FallBack "Hidden/Shader Graph/FallbackError"
}